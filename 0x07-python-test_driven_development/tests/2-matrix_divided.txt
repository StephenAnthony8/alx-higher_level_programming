>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
... [1, 2, 3],
... [4, 5, 6],
... ]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix[0] = [0, 0, 0]
>>> matrix_divided(matrix, 3)
[[0.0, 0.0, 0.0], [1.33, 1.67, 2.0]]

>>> print((matrix_divided(matrix, 3))[1][0])
1.33
>>> print(matrix)
[[0, 0, 0], [4, 5, 6]]

>>> matrix_2 = [
... [1, 2],
... [3, 4, 5]
... ]
>>> matrix_divided(matrix_2, 3)
Traceback (most recent call last):
        ...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
        ...
ZeroDivisionError: division by zero

>>> type(matrix_divided(matrix, 10))
<class 'list'>

>>> matrix = [[], [], []]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
        ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = []
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
        ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(matrix, "yeet")
Traceback (most recent call last):
        ...
TypeError: div must be a number
>>> matrix_divided()
Traceback (most recent call last):
        ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
>>> matrix_divided(matrix)
Traceback (most recent call last):
        ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
